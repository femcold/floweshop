// NewAccountModal.js
import React, { useState, useEffect } from 'react';
import { Modal, Form, Button } from 'react-bootstrap';
import axios from 'axios';

const NewAccountModal = ({ showModal, handleClose, onSave, onAccountCreated }) => {
  const [newAccountData, setNewAccountData] = useState({
    customerAccount: '',
    name: '',
    email: '',
    phoneNumber: '',
    address: '',
  });

  const [isAccountCreated, setAccountCreated] = useState(false);

  useEffect(() => {
    const fetchAutogeneratedNumber = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/generate-customer-account-number');
        const { customerAccountNumber } = response.data;

        setNewAccountData((prevData) => ({
          ...prevData,
          customerAccount: customerAccountNumber,
        }));
      } catch (error) {
        console.error('Error fetching autogenerated customer account number:', error);
      }
    };

    if (showModal) {
      fetchAutogeneratedNumber();
    }
  }, [showModal]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.get('http://localhost:5000/api/generate-customer-account-number');
      const { customerAccountNumber } = response.data;
  
      const formData = {
        ...newAccountData,
        customerAccount: customerAccountNumber,
      };
  
      await axios.post('http://localhost:5000/api/create-account', formData);
  
      setAccountCreated(true);
  
      // Check if onAccountCreated is a function before calling it
      if (typeof onAccountCreated === 'function') {
        onAccountCreated(formData);
      }
  
      setTimeout(() => {
        handleClose();
      }, 2000);
    } catch (error) {
      console.error('Error submitting new account form:', error);
    }
  };
  

  return (
    <Modal show={showModal} onHide={handleClose}>
      <Modal.Header closeButton>
        <Modal.Title>Create New Account</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form onSubmit={handleSubmit}>
          <Form.Group controlId="customerAccount">
            <Form.Label>Customer Account</Form.Label>
            <Form.Control
              type="text"
              name="customerAccount"
              value={newAccountData.customerAccount}
              readOnly
              required
            />
          </Form.Group>
          <Form.Group controlId="name">
            <Form.Label>Name</Form.Label>
            <Form.Control
              type="text"
              name="name"
              value={newAccountData.name}
              onChange={(e) => setNewAccountData((prevData) => ({ ...prevData, name: e.target.value }))}
              placeholder="Enter Customer Name"
              required
            />
          </Form.Group>
          <Form.Group controlId="email">
            <Form.Label>Email</Form.Label>
            <Form.Control
              type="email"
              name="email"
              value={newAccountData.email}
              onChange={(e) => setNewAccountData((prevData) => ({ ...prevData, email: e.target.value }))}
              placeholder="Enter Customer Email"
              required
            />
          </Form.Group>
          <Form.Group controlId="phoneNumber">
            <Form.Label>Phone Number</Form.Label>
            <Form.Control
              type="text"
              name="phoneNumber"
              value={newAccountData.phoneNumber}
              onChange={(e) => setNewAccountData((prevData) => ({ ...prevData, phoneNumber: e.target.value }))}
              placeholder="Enter Customer Phone Number"
              required
            />
          </Form.Group>
          <Form.Group controlId="address">
            <Form.Label>Address</Form.Label>
            <Form.Control
              type="text"
              name="address"
              value={newAccountData.address}
              onChange={(e) => setNewAccountData((prevData) => ({ ...prevData, address: e.target.value }))}
              placeholder="Enter Customer Address"
              required
            />
          </Form.Group>
          <Form.Group className="mt-3">
            <Button variant="primary" type="submit">
              Save Account
            </Button>
            {isAccountCreated && (
              <span className="ml-3 text-success">Account Created Successfully</span>
            )}
          </Form.Group>
        </Form>
      </Modal.Body>
    </Modal>
  );
};

export default NewAccountModal;
